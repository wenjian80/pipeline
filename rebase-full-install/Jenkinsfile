/**
 * Copyright (c) 2020, Oracle Corporation and/or its affiliates.
 * Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.
 */

/* Jenkinsfile for complete FMW install with JDK installer, FMW installer, patches. */

properties([
    parameters([
        choice(choices: ['Object Storage', 'Shared File System'], description: 'JDK installer can be provided via either the pre-authenticated URL for the file in Object Storage (https://<pre-authenticated URL>/jdk*tar.gz) or at a path on the shared file system (under /u01/shared location).', name: 'JDK_Installer'),
        [$class: 'DynamicReferenceParameter', choiceType: 'ET_FORMATTED_HTML', description: '', name: 'JDK_Location', omitValueField: true, randomName: 'choice-parameter-68533938648359', referencedParameters: 'JDK_Installer', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: ''], script: [classpath: [], sandbox: false, script: 'if (JDK_Installer.equals("Object Storage")) { return "<input name=\'value\' class=\'setting-input\' type=\'text\' id=\'object_storage\'> <br><label for=\'object_storage\' class=\'setting-description\'>Pre-authenticated URL to download JDK installer in tar.gz format.</label>" } else if (JDK_Installer.equals("Shared File System")) { return "<input name=\'value\' class=\'setting-input\' type=\'text\' id=\'shared_file\'><br><label for=\'shared_file\' class=\'setting-description\'>Full path to the location of JDK installer (/u01/shared/path/to/jdk*.tar.gz) in tar.gz format.</label>" }']]],
        choice(choices: ['Object Storage', 'Shared File System'], description: 'FMW installer can be provided via either the pre-authenticated URL (https://pre-authenticated-URL/fmw_12.2.1.4.0_infrastructure.jar) for the file in Object Storage or at a path on the shared file system (under /u01/shared location).', name: 'FMW_Installer'),
        [$class: 'DynamicReferenceParameter', choiceType: 'ET_FORMATTED_HTML', description: '', name: 'FMW_Installer_Location', omitValueField: true, randomName: 'choice-parameter-68533942998162', referencedParameters: 'FMW_Installer', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: ''], script: [classpath: [], sandbox: false, script: 'if (FMW_Installer.equals("Object Storage")) { return "<input name=\'value\' class=\'setting-input\' type=\'text\' id=\'object_storage\'> <br> <label for=\'object_storage\' class=\'setting-description\'>Pre-authenticated URL to download FMW installer.</label>" } else if (FMW_Installer.equals("Shared File System")) { return "<input name=\'value\' class=\'setting-input\' type=\'text\' id=\'shared_file\'><br><label for=\'shared_file\' class=\'setting-description\'>Full path to the location of FMW installer (/u01/shared/path/to/fmw_12.2.1.4.0_infrastructure.jar).</label>" }']]],
        choice(choices: ['Object Storage', 'Shared File System'], description: 'WebLogic patches can be provided via either the pre-authenticated URL for the file in Object Storage (https://<pre-authenticated URL>/opatch.zip) or at a path on the shared file system (under /u01/shared location).', name: 'WLS_Opatches'),
        text(defaultValue: '', description: '''Object Storage: Pre-authenticated URL to download WebLogic Patches. Multiple patches can be provided in separate line.\nShared File System Location: Full path to the location of WebLogic Patches (/u01/shared/path/to/patch.zip). Multiple patches can be provided in separate line.''', name: 'Opatches_Location'),
        booleanParam(defaultValue: true, description: 'Skip opatch version update', name: 'Skip_Opatch_Update'),
        booleanParam(defaultValue: true, description: 'Rollback to previous state if Apply Domain fails.', name: 'Rollback_On_Failure'),
//         booleanParam(defaultValue: false, description: 'Scan domain image for security vulnerabilities.', name: 'Scan_Image_Enabled')
    ])
])

def ARGS = ""
def JDK_Version = "1.8"

pipeline {
    agent {
        node {
            label 'agent-label-slave'
        }
    }
    options {
        skipStagesAfterUnstable()
        disableConcurrentBuilds()
        timestamps()
        warnError('Pipeline error caught')
    }
    environment {
        BUILD_TS = get_build_timestamp()
    }
    stages {
        stage("PRE-CHECK") {
            steps {
                echo "Validating Domain is running... "
                echo "FMW_Installer: ${params.FMW_Installer}"
                echo "FMW_Installer_Location: ${params.FMW_Installer_Location}"
                echo "WLS_Opatches: ${params.WLS_Opatches}"
                echo "Opatches_Location: ${params.Opatches_Location}"
                echo "JDK_Installer: ${params.JDK_Installer}"
                echo "JDK_Location: ${params.JDK_Location}"
                echo "JDK_Version: ${JDK_Version}"
		echo "Skip_Opatch_Update: ${params.Skip_Opatch_Update}"
                echo "Rollback_On_Failure: ${params.Rollback_On_Failure}"
//                 echo "Scan_Image: ${params.Scan_Image_Enabled}"

                script {
                    if (params.Rollback_On_Failure) {
                        ARGS += "-r "
                    }
//                     if (params.Scan_Image_Enabled) {
//                         ARGS += "-s "
//                     }
		    if (params.Skip_Opatch_Update) {
                        ARGS += "-o "
                    }
                    ARGS += "-v " + JDK_Version + " "
                    // Get FMW Installer
                    switch (params.FMW_Installer) {
                        case 'Object Storage':
                            if (isURLValid(params.FMW_Installer_Location)) {
                               sh "wget -O $WORKSPACE/fmw_infrastructure.jar ${FMW_Installer_Location}"
                               ARGS += "-f " + env.WORKSPACE + "/fmw_infrastructure.jar "
                            } else {
                                println "URL is invalid: [" + params.FMW_Installer_Location + "]"
                                error("Build failed")
                            }
                            break
                        case 'Shared File System Location':
                            if (checkFileExists(params.FMW_Installer_Location)) {
                               sh "cp ${FMW_Installer_Location} $WORKSPACE/fmw_infrastructure.jar"
                               ARGS += "-f " + env.WORKSPACE + "/fmw_infrastructure.jar "
                            } else {
                                println "File does not exist: [" + params.FMW_Installer_Location + "]"
                                error("Build failed")
                            }
                            break
                    }
                    switch (params.JDK_Installer) {
                        case 'Object Storage':
                            if (isURLValid(params.JDK_Location)) {
                               sh "wget -O $WORKSPACE/jdk.tar.gz ${JDK_Location}"
                               ARGS += "-j " + env.WORKSPACE + "/jdk.tar.gz "
                            } else {
                                println "URL is invalid: [" + params.JDK_Location + "]"
                                error("Build failed")
                            }
                            break
                        case 'Shared File System Location':
                            if (checkFileExists(params.JDK_Location)) {
                               sh "cp ${JDK_Location} $WORKSPACE/jdk.tar.gz"
                               ARGS += "-j " + env.WORKSPACE + "/jdk.tar.gz "
                            } else {
                                println "File does not exist: [" + params.JDK_Location + "]"
                                error("Build failed")
                            }
                            break
                    }
                    switch (params.WLS_Opatches) {
                        case 'Shared File System Location':
                                def counter=0;
                                def patch_str="";
                                for ( opatch in params.Opatches_Location.tokenize() )
                                {
                                   if (checkFileExists(opatch)) {
                                      sh "cp $opatch $WORKSPACE"
                                      def base = sh(script: "basename $opatch" , returnStdout: true)
                                      patch_str += env.WORKSPACE+"/"+base+" "
                                   } else {
                                          println "File does not exist: [" + opatch + "]"
                                          error("Build failed")
                                   }
                                }
                                def patch_str_new = '"'+patch_str+'"'
                                ARGS += "-w " + patch_str_new + " "
                                break
                        case 'Object Storage':
                                def counter=0;
                                def patch_str="";
                                for ( opatch in params.Opatches_Location.tokenize() )
                                {
                                    if (isURLValid(opatch)) {
                                      sh "wget $opatch -P $WORKSPACE"
                                      def base = sh(script: "basename $opatch" , returnStdout: true)
                                      patch_str += env.WORKSPACE+"/"+base+" "
                                   } else {
                                      println "URL is invalid: [" + opatch + "]"
                                      error("Build failed")
                                   }
                                }
                                def patch_str_new = '"'+patch_str+'"'
                                ARGS += "-w " + patch_str_new + " "
                                break
                    }
                    println "ARGS: " + ARGS
                    sh "/u01/shared/scripts/pipeline/common/precheck_common.sh ${ARGS}"
                }

            }
            post {
                failure {
                    echo "Failed in pre-check"
                }
                unstable {
                    echo "Unstable in pre-check"
                }
            }
        }
        stage('REBASE_FULL_INSTALL') {
            steps {
                echo "Install FMW with jdk and patches... "
                sh "/u01/shared/scripts/pipeline/rebase-full-install/rebase_full_install.sh ${ARGS}"
            }
            post {
                failure {
                    echo "Failed in rebase full install"
                }
                unstable {
                    echo "Unstable in rebase full install"
                }
            }
        }
        /* Scan Image stage:
            Scan the new image for vulnerabilities.
         */
//         stage("SCAN_IMAGE") {
//             steps {
//                 echo "Scanning image for vulnerabilities..."
//                 sh "/u01/shared/scripts/pipeline/common/scan_domain_img_common.sh ${ARGS}"
//             }
//             post {
//                 failure {
//                     echo "Failed in scanning image"
//                 }
//                 unstable {
//                     echo "Unstable in scanning image"
//                 }
//             }
//         }
        stage("OCIR_UPLOAD") {
            steps {
                echo "Pushing Domain image to OCIR... "
                sh "/u01/shared/scripts/pipeline/common/ocir_push_domain_img_common.sh ${ARGS}"
            }
            post {
                failure {
                    echo "Failed in pushing domain to OCIR"
                }
                unstable {
                    echo "Unstable in pushing domain to OCIR"
                }
            }
        }
        stage("TEST_AND_DEPLOY_DOMAIN") {
            steps {
                build job: 'test-and-deploy-domain-job',
                        parameters: [
                                string(name: 'ARGS', value: "${ARGS}"),
                                string(name:'BUILD_TS', value:"${BUILD_TS}"),
                        ]
            }
        }
    }
}
/**
 * Generating build timestamp.
 * This will be used to tag the updated domain docker image.
 */
def get_build_timestamp() {
    Date date = new Date()
    buildTimestamp = date.format('yy-MM-dd_HH-mm-ss')
    println("Generated Build Timestamp: " + buildTimestamp)
    return buildTimestamp
}
/**
 * Check if valid URL.
 * @param str   URL string
 * @return  true if valid, false otherwise.
 */
def Boolean isURLValid(String str)
{
    try {
        new URL(str)
        return true
    } catch (MalformedURLException e) {
        return false
    }
}
/**
 * Check if file exists.
 *
 * @param fileName  Absolute path of file.
 * @return  true if file exists, false otherwise.
 */
def Boolean checkFileExists(String fileName) {
    try {
        File file = new File(fileName)
        return file.exists()
    } catch (Exception e) {
        return false
    }
}
